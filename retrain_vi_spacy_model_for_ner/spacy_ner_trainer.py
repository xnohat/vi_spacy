# -*- coding: utf-8 -*-
"""NER solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Msgu-CcQUz-evfQinm8DarHwd4uh5Dsm
"""

#pip install pyvi

"""## Load Packages"""

from __future__ import unicode_literals, print_function
import plac
import pickle
import random
from pathlib import Path
import spacy
from tqdm import tqdm

nlp1 = spacy.load('en_core_web_sm')

"""## Working of NER"""

docx1 = nlp1(u"Who is Nishanth?")

for token in docx1.ents:
    print(token.text,token.start_char, token.end_char,token.label_)

docx2 = nlp1(u"Who is Kamal Khumar?")

for token in docx2.ents:
    print(token.text,token.start_char, token.end_char,token.label_)

"""## Train Data"""

with open ('./phoner_train_word_spacy_ner', 'rb') as fp:
    TRAIN_DATA = pickle.load(fp)

"""## Define our variables"""

model = None
output_dir=Path("./ner")
n_iter=100

"""## Load the model"""

if model is not None:
    nlp = spacy.load(model)  
    print("Loaded model '%s'" % model)
else:
    nlp = spacy.blank('vi')  
    print("Created blank 'vi' model")

"""## Set up the pipeline"""

if 'ner' not in nlp.pipe_names:
    ner = nlp.create_pipe('ner')
    nlp.add_pipe(ner, last=True)
else:
    ner = nlp.get_pipe('ner')

"""## Train the Recognizer"""

for _, annotations in TRAIN_DATA:
    for ent in annotations.get('entities'):
        ner.add_label(ent[2])

other_pipes = [pipe for pipe in nlp.pipe_names if pipe != 'ner']
with nlp.disable_pipes(*other_pipes):  # only train NER
    optimizer = nlp.begin_training()
    for itn in range(n_iter):
        random.shuffle(TRAIN_DATA)
        losses = {}
        for text, annotations in tqdm(TRAIN_DATA):
            nlp.update(
                [text],  
                [annotations],  
                drop=0.5,  
                sgd=optimizer,
                losses=losses)
        print(losses)

"""## Test the trained model"""

for text, _ in TRAIN_DATA:
    doc = nlp(text)
    print('Entities', [(ent.text, ent.label_) for ent in doc.ents])
    print('Tokens', [(t.text, t.ent_type_, t.ent_iob) for t in doc])

"""## Save the model"""

if output_dir is not None:
    output_dir = Path(output_dir)
    if not output_dir.exists():
        output_dir.mkdir()
    nlp.to_disk(output_dir)
    print("Saved model to", output_dir)

"""## Test the saved model"""

print("Loading from", output_dir)
nlp2 = spacy.load(output_dir)
for text, _ in TRAIN_DATA:
    doc = nlp2(text)
    print('Entities', [(ent.text, ent.label_) for ent in doc.ents])
    print('Tokens', [(t.text, t.ent_type_, t.ent_iob) for t in doc])

